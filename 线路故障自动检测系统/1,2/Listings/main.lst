C251 COMPILER V5.60.0,  main                                                               05/08/23  18:48:53  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE main
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C251\BIN\C251.EXE main.c LARGE INTR2 ROM(HUGE) BROWSE DEBUG PRINT(.\Listings\main.lst) O
                    -BJECT(.\Objects\main.obj) 

stmt  level    source

    1          #include <STC32G.H>
    2          #include <stdio.h>
    3          #include "oled.h"
    4          #include "USART.H"
    5          #include "key_multi.h"
    6          #include "ADC.H"
    7          /*程序频率为24Mhz*/
    8          #define N 100
    9          #define u8 unsigned char
   10          #define u16 unsigned int
   11          #define u32 unsigned long
   12          u8 Key1_nums,Key2_nums,Key3_nums,Key4_nums;             //KEY1双击次数，KEY2双击次数，KEY3双击次数，KEY4双击次数
   13          u8 keyvalue;//键值
   14          u16 b=500;
   15          u16 TH1_NOW,TL1_NOW;
   16          char count_key=0;//频率电压采样转换
   17          char c,TF1_NOW=0;
   18          float f;
   19          char count;
   20          int count_time4=0;
   21          void Timer1_Init(void)          //2毫秒@24.000MHz  计数器
   22          {
   23   1              TMOD &= 0x0F;                   //设置定时器模式
   24   1              TMOD |= 0x50;                   //设置定时器模式
   25   1              TL1 = 0;                                //设置定时初始值
   26   1              TH1 = 0;                                //设置定时初始值
   27   1              TF1 = 0;                                //清除TF1标志
   28   1              TR1 = 1;                                //定时器0开始计时
   29   1              ET1 = 1;                                //使能定时器1中断
   30   1              
   31   1      }
   32          void Timer1_Isr(void) interrupt 3
   33          {
   34   1              c++;
   35   1      }
   36          
   37          void Timer0_Init(void)          //2毫秒@24.000MHz
   38          {
   39   1              AUXR |= 0x80;                   //定时器时钟1T模式
   40   1              TMOD &= 0xF0;                   //设置定时器模式
   41   1              TL0 = 0x80;                             //设置定时初始值
   42   1              TH0 = 0x44;                             //设置定时初始值
   43   1              TF0 = 0;                                //清除TF0标志
   44   1              TR0 = 1;                                //定时器0开始计时
   45   1              ET0 = 1;                                //使能定时器0中断
   46   1      }
   47          void Delay_ms_(int ms)          //@24.000MHz
   48          {
   49   1              while(ms--)
   50   1              {
   51   2                      unsigned long edata k;
   52   2                      _nop_();
   53   2                      _nop_();
   54   2                      _nop_();
   55   2                      k = 5998UL;
   56   2                      while (k)k--;
   57   2              }
   58   1      }
C251 COMPILER V5.60.0,  main                                                               05/08/23  18:48:53  PAGE 2   

   59          
   60          /*ADC延迟函数*/
   61          void Delay_ADC_100us()          
   62          {
   63   1              unsigned long edata i;
   64   1      
   65   1              _nop_();
   66   1              _nop_();
   67   1              _nop_();
   68   1              i = 598UL;
   69   1              while (i) i--;
   70   1      }
   71          /*ADC调用函数
   72          返回值为采集电压*/
   73          float ADC_call_1()
   74          {
   75   1              float ADC_1,ADC_15;//ADC通道储存变量
   76   1              float ADC_out_1;//ADC通道一的最终储存
   77   1              ADC_15=Get_ADC12bitResult(15);
   78   1              ADC_1=Get_ADC12bitResult(1);
   79   1              ADC_out_1=(float)(1.18301*ADC_1/ADC_15);
   80   1      //      printf("%.4f\n",ADC_out_filter);
   81   1              Delay_ADC_100us();
   82   1              return ADC_out_1;
   83   1      }
   84          float ADC_call_2()
   85          {
   86   1              float ADC_2,ADC_15;//ADC通道储存变量
   87   1              float ADC_out_2;//ADC通道一的最终储存
   88   1              ADC_15=Get_ADC12bitResult(15);
   89   1              ADC_2=Get_ADC12bitResult(2);
   90   1              ADC_out_2=(float)(1.18301*ADC_2/ADC_15);
   91   1      //      printf("%.4f\n",ADC_out_filter);
   92   1              Delay_ADC_100us();
   93   1              return ADC_out_2;
   94   1      }
   95          /*滤波*/
   96          float filter(float import)
   97          {
   98   1      float sum = 0;
   99   1      for (count=0;count<N;count++)
  100   1      {
  101   2              sum += import;
  102   2      }
  103   1      return (float)(sum/N);
  104   1      }
  105          /*错误判断,
  106            输入值为采集频率
  107            返回值错误编号*/
  108          char Frequency_judgment(float HZ,float U)
  109          {
  110   1              char open_circuit_numbe=0;
  111   1      
  112   1                      if(HZ>5300&&HZ<5800&&U>0.4)     //正常模式
  113   1                      {
  114   2                              open_circuit_numbe=1;
  115   2                      }               
  116   1                      else if(HZ>57000&&HZ<59000&&U<0.4)   //L1
  117   1                      {
  118   2                              open_circuit_numbe=2;
  119   2                      }
  120   1                      else if(HZ>12000&&HZ<13000&&U<0.4)  //L2
  121   1                      {
  122   2                              open_circuit_numbe=3;
  123   2                      }
  124   1                      else if(HZ>7300&&HZ<7500&&U<0.4)    //L3
C251 COMPILER V5.60.0,  main                                                               05/08/23  18:48:53  PAGE 3   

  125   1                      {
  126   2                              open_circuit_numbe=4;
  127   2                      }
  128   1                      else if(HZ>5900&&HZ<6080&&U>0.4)    //C1
  129   1                      {
  130   2                              open_circuit_numbe=5;
  131   2                      }
  132   1                      else if(HZ>8900&&HZ<9300&&U>0.4)   //C2
  133   1                      {
  134   2                              open_circuit_numbe=6;
  135   2                      }
  136   1                      else if(HZ>7500&&HZ<9000&&U>0.4)   //C3
  137   1                      {
  138   2                              open_circuit_numbe=7;
  139   2                      }
  140   1                      else if(HZ>6080&&HZ<6300&&U>0.4)   //C4
  141   1                      {
  142   2                              open_circuit_numbe=8;
  143   2                      }
  144   1                       else if(U>1.6 &&U<2)
  145   1                      {
  146   2                              open_circuit_numbe=1;
  147   2                      }
  148   1                      else if(U>2&&U<2.5)
  149   1                      {
  150   2                              open_circuit_numbe=9;
  151   2                      }               
  152   1                      else if(U>0.6&&U<1)
  153   1                      {
  154   2                              open_circuit_numbe=10;
  155   2                      }
  156   1                      else if(U>1.2&&U<1.6)
  157   1                      {
  158   2                              open_circuit_numbe=11;
  159   2                      }
  160   1                      else if(U<0.2&&HZ<10)
  161   1                      {
  162   2                              open_circuit_numbe=12;
  163   2                      }
  164   1              return open_circuit_numbe;
  165   1      }
  166          
  167          /*故障编号判断*/
  168          void Fault_number()
  169          {       
  170   1              char malfunction_number=0;
  171   1              malfunction_number=Frequency_judgment(filter(f),ADC_call_1());
  172   1              switch(malfunction_number)
  173   1              {
  174   2                      case 0:
  175   2                              
  176   2                              OLED_ShowChinese(16,2,19,16);//开
  177   2                              OLED_ShowChinese(32,2,20,16);//始
  178   2                              OLED_ShowChinese(48,2,6,16);//检
  179   2                              OLED_ShowChinese(64,2,7,16);//测
  180   2                      break;
  181   2                      case 1:
  182   2                              
  183   2                              OLED_ShowChinese(16,2,16,16);//没
  184   2                              OLED_ShowChinese(32,2,17,16);//有
  185   2                              OLED_ShowChinese(48,2,12,16);//故
  186   2                              OLED_ShowChinese(64,2,13,16);//障
  187   2                      break;
  188   2                      case 2:
  189   2                              OLED_ShowString(16,2,"L1",16);
  190   2                              OLED_ShowChinese(32,2,10,16);//开
C251 COMPILER V5.60.0,  main                                                               05/08/23  18:48:53  PAGE 4   

  191   2                              OLED_ShowChinese(48,2,11,16);//路
  192   2                              OLED_ShowString(64,2,"  ",16);
  193   2                      break;
  194   2                      case 3:
  195   2                              OLED_ShowString(16,2,"L2",16);
  196   2                              OLED_ShowChinese(32,2,10,16);//开
  197   2                              OLED_ShowChinese(48,2,11,16);//路
  198   2                              OLED_ShowString(64,2,"  ",16);
  199   2                      break;
  200   2                      case 4:
  201   2                              OLED_ShowString(16,2,"L3",16);
  202   2                              OLED_ShowChinese(32,2,10,16);//开
  203   2                              OLED_ShowChinese(48,2,11,16);//路
  204   2                              OLED_ShowString(64,2,"  ",16);
  205   2                      break;
  206   2                      case 5:
  207   2                              OLED_ShowString(16,2,"C1",16);
  208   2                              OLED_ShowChinese(32,2,10,16);//开
  209   2                              OLED_ShowChinese(48,2,11,16);//路
  210   2                              OLED_ShowString(64,2,"  ",16);
  211   2                      break;
  212   2                      case 6:
  213   2                              OLED_ShowString(16,2,"C2",16);
  214   2                              OLED_ShowChinese(32,2,10,16);//开
  215   2                              OLED_ShowChinese(48,2,11,16);//路
  216   2                              OLED_ShowString(64,2,"  ",16);
  217   2                      break;
  218   2                      case 7:
  219   2                              OLED_ShowString(16,2,"C3",16);
  220   2                              OLED_ShowChinese(32,2,10,16);//开
  221   2                              OLED_ShowChinese(48,2,11,16);//路
  222   2                              OLED_ShowString(64,2,"  ",16);
  223   2                      break;
  224   2                      case 8:
  225   2                              OLED_ShowString(16,2,"C4",16);
  226   2                              OLED_ShowChinese(32,2,10,16);//开
  227   2                              OLED_ShowChinese(48,2,11,16);//路
  228   2                              OLED_ShowString(64,2,"  ",16);          
  229   2                      break;
  230   2                      case 9:
  231   2                              OLED_ShowString(16,2,"L1",16);
  232   2                              OLED_ShowChinese(32,2,18,16);//短
  233   2                              OLED_ShowChinese(48,2,11,16);//路
  234   2                              OLED_ShowString(64,2,"  ",16);          
  235   2                      break;
  236   2                      case 10:
  237   2                              OLED_ShowString(16,2,"L2",16);
  238   2                              OLED_ShowChinese(32,2,18,16);//短
  239   2                              OLED_ShowChinese(48,2,11,16);//路
  240   2                              OLED_ShowString(64,2,"  ",16);
  241   2                      break;
  242   2                      case 11:
  243   2                              OLED_ShowString(16,2,"L3",16);
  244   2                              OLED_ShowChinese(32,2,18,16);//短
  245   2                              OLED_ShowChinese(48,2,11,16);//路
  246   2                              OLED_ShowString(64,2,"  ",16);          
  247   2                      break;
  248   2                      case 12:
  249   2                              OLED_ShowString(16,2,"C3",16);
  250   2                              OLED_ShowChinese(32,2,18,16);//短
  251   2                              OLED_ShowChinese(48,2,11,16);//路
  252   2                              OLED_ShowString(64,2,"  ",16);          
  253   2                      break;
  254   2                      
  255   2              }
  256   1      }
C251 COMPILER V5.60.0,  main                                                               05/08/23  18:48:53  PAGE 5   

  257          /*多功能独立按键*/
  258          void key_independence()
  259          {
  260   1              
  261   1                      if(keyvalue == Key1_Single_Click)//KEY1短按测量一次
  262   1                      {
  263   2                              count_time4+=1;
  264   2                      }
  265   1                      if(keyvalue == Key1_Long_Click)//KEY1长按,
  266   1                      {
  267   2                              
  268   2                      }
  269   1                      if(keyvalue == Key1_Double_Click)//KEY1双击
  270   1                      {
  271   2                              Key1_nums++;            //KEY1双击次数
  272   2                              if(Key1_nums%2 == 1)            //奇数次双击
  273   2                              {
  274   3      
  275   3                              }
  276   2                              if(Key1_nums%2 == 0)            //偶数次双击，熄灭LED1、LED2
  277   2                              {
  278   3                              
  279   3                              }
  280   2                              if(Key1_nums >= 99) Key1_nums = 0;              //防止KEY1双击次数溢出，清零
  281   2                      }
  282   1                      
  283   1                      if(keyvalue == Key2_Single_Click) //KEY2短按
  284   1                      {
  285   2                      
  286   2                      }
  287   1                      if(keyvalue == Key2_Long_Click)//KEY2长按
  288   1                      {
  289   2                      
  290   2                      }
  291   1                      if(keyvalue == Key2_Double_Click) //KEY3双击
  292   1                      {
  293   2                              Key2_nums++;            //KEY2双击次数
  294   2                              if(Key2_nums%2 == 1)            //奇数次双击
  295   2                              {
  296   3                              
  297   3                              }
  298   2                              if(Key2_nums%2 == 0)            //偶数次双击
  299   2                              {
  300   3                              
  301   3                              }
  302   2                              if(Key2_nums >= 99) Key2_nums = 0;      //防止KEY2双击次数溢出，清零
  303   2                      }
  304   1                      
  305   1                      if(keyvalue == Key3_Single_Click)//KEY3短按
  306   1                      {
  307   2                      
  308   2                      }
  309   1                      if(keyvalue == Key3_Long_Click)//KEY3长按
  310   1                      {
  311   2                      
  312   2                      }
  313   1                      if(keyvalue == Key3_Double_Click) //KEY3双击
  314   1                      {
  315   2                              Key3_nums++;            //KEY3双击次数
  316   2                              if(Key3_nums%2 == 1)//奇数次双击
  317   2                              {
  318   3      
  319   3                              }
  320   2                              if(Key3_nums%2 == 0)            //偶数次双击
  321   2                              {
  322   3      
C251 COMPILER V5.60.0,  main                                                               05/08/23  18:48:53  PAGE 6   

  323   3                              }
  324   2                              if(Key3_nums >= 99) Key3_nums = 0;              //防止KEY3双击次数溢出，清零
  325   2                      }
  326   1                      
  327   1                      if(keyvalue == Key4_Single_Click)//KEY4短按
  328   1                      {
  329   2                      
  330   2                      }
  331   1                      if(keyvalue == Key4_Long_Click)//KEY4长按
  332   1                      {
  333   2                      
  334   2                      }
  335   1                      if(keyvalue == Key4_Double_Click)//KEY4双击
  336   1                      {
  337   2                              Key4_nums++;            //KEY4双击次数
  338   2                              if(Key4_nums%2 == 1)//奇数次双击        
  339   2                              {
  340   3      
  341   3                              }
  342   2                              if(Key4_nums%2 == 0)            //偶数次双击
  343   2                              {
  344   3                                      
  345   3                              }
  346   2                              if(Key4_nums >= 99) Key4_nums = 0;              //防止KEY4双击次数溢出，清零
  347   2                      }
  348   1      }
  349          
  350          
  351          
  352          void main()
  353          {
  354   1              
  355   1              EA=1;
  356   1              XOSCCR=0xc4;
  357   1              while(XOSCCR&1);
  358   1              CLKDIV=0X00;
  359   1              CLKSEL=0X01;
  360   1              
  361   1              EAXFR=1;
  362   1              CKCON=0X00;
  363   1              WTST=0X00;
  364   1              P0M0 = 0x00; P0M1 = 0x00; 
  365   1              P3M0 &= ~0xdf; P3M1 &= ~0xdf; 
  366   1              P2M0 = 0xff; P2M1 = 0x00; 
  367   1              P4M0 = 0XFF; P4M1 = 0X00;
  368   1              OLED_Init();
  369   1              Timer0_Init();
  370   1              Timer1_Init();
  371   1              UartInit();
  372   1              ADC_init();
  373   1      
  374   1              while(1)
  375   1              {
  376   2                      keyvalue = key_multi();//读取键值
  377   2                      key_independence();
  378   2                      
  379   2                      switch(count_time4)
  380   2                      {
  381   3                              case 1:
  382   3                              Delay_ms_(10000);
  383   3                              P01=0;
  384   3                              Delay_ms_(1000);
  385   3                              if(Frequency_judgment(filter(f),ADC_call_1())<9)
  386   3                              {
  387   4                                      P01=1;
  388   4                                      Delay_ms_(4000);
C251 COMPILER V5.60.0,  main                                                               05/08/23  18:48:53  PAGE 7   

  389   4                                      Fault_number();
  390   4                              }
  391   3                              else 
  392   3                              {
  393   4                                      Delay_ms_(3000);
  394   4                                      Fault_number(); 
  395   4                              }
  396   3                              break;
  397   3                      }
  398   2      
  399   2              }
  400   1      }
  401          void Timer0_Isr(void) interrupt 1
  402          {
  403   1                      if(b--==0)
  404   1                      {
  405   2                              TF1_NOW=c;
  406   2                              c=0;
  407   2                              b=500;
  408   2                              TH1_NOW=TH1;
  409   2                              TL1_NOW=TL1;
  410   2                              TH1=0;
  411   2                              TL1=0;  
  412   2                              f=(float)((((TH1_NOW<<8)+TL1_NOW)+(TF1_NOW*65535))*1.00145621805);
  413   2                              printf("%.3f %.3f\n\r",ADC_call_1(),filter(f));
  414   2                      }
  415   1                      
  416   1                      
  417   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =         8     ------
  ecode size           =      1903     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =        21     ------
  xdata-const size     =    ------     ------
  edata size           =    ------     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =        62     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
