C251 COMPILER V5.60.0,  main                                                               27/07/23  21:21:46  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE main
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C251\BIN\C251.EXE main.c LARGE INTR2 BROWSE DEBUG PRINT(.\Listings\main.lst) OBJECT(.\Ob
                    -jects\main.obj) 

stmt  level    source

    1          #include <STC32G.H>
    2          #include "USART.H"
    3          #include <stdio.h>
    4          
    5          #define PWM_PERIOD  1000   //设置周期值
    6          #define ENO3P       0x10
    7          #define ENO3N       0x20
    8          #define PWM3_1      0x10        //P:P2.4  N:P2.5
    9          unsigned int PWM3_Duty;
   10          unsigned char cnt_H,cnt_L;
   11          unsigned int newcount,oldcount;                                         //计数值、新计数值
   12          unsigned int number,out;                                                                                //数码管计数值
   13                                                          
   14          
   15          
   16          float PID(float Sample,float Position); //增量式PID
   17          void PWM_Config();
   18          void Encoder_Check();
   19          void Timer0_Init(void);         //100微秒@12.000MHz
   20          
   21          
   22          
   23          void main()
   24          {
   25   1              EAXFR = 1;                                                                      // 使能访问 XFR
   26   1              CKCON = 0x00;                                                     // 设置外部数据总线速度为最快
   27   1              WTST = 0x00;                                                            // 设置程序代码等待参数，赋值为 0 可将 CPU 执行程序的速度设置为最快
   28   1      
   29   1              P0M1 = 0x00;P0M0 = 0x00;                //设置P0口为准双向口模式 //00：准双向口 01：推挽输出 10：高阻输入 11：开漏输出
   30   1              P1M1 = 0x00;P1M0 = 0xff;                //设置P1口为准双向口模式 //00：准双向口 01：推挽输出 10：高阻输入 11：开漏输出
   31   1              P2M1 = 0x00;P2M0 = 0x00;                //设置P2口为准双向口模式 //00：准双向口 01：推挽输出 10：高阻输入 11：开漏输出
   32   1              P3M1 = 0x00;P3M0 = 0x00;                //设置P3口为准双向口模式 //00：准双向口 01：推挽输出 10：高阻输入 11：开漏输出
   33   1              P4M1 = 0x00;P4M0 = 0x00;                //设置P4口为准双向口模式 //00：准双向口 01：推挽输出 10：高阻输入 11：开漏输出
   34   1              P5M1 = 0x00;P5M0 = 0x00;                //设置P5口为准双向口模式 //00：准双向口 01：推挽输出 10：高阻输入 11：开漏输出
   35   1              P6M1 = 0x00;P6M0 = 0x00;                //设置P6口为准双向口模式 //00：准双向口 01：推挽输出 10：高阻输入 11：开漏输出
   36   1              P7M1 = 0x00;P7M0 = 0x00;                //设置P7口为准双向口模式 //00：准双向口 01：推挽输出 10：高阻输入 11：开漏输出
   37   1              
   38   1              EA=1;
   39   1              PWM_Config();
   40   1              UartInit();
   41   1      //      Timer0_Init();
   42   1              PWM3_Duty=100;
   43   1      
   44   1              while(1)
   45   1              {               
   46   2      
   47   2                      
   48   2                              printf("%d\n",newcount);
   49   2                              
   50   2              }               
   51   1      }
   52          //void Timer0_Isr(void) interrupt 1
   53          //{
   54          //      out=(newcount-oldcount);
   55          //      oldcount=newcount;
   56          //}
   57          
   58          //void Timer0_Init(void)                //100微秒@12.000MHz
C251 COMPILER V5.60.0,  main                                                               27/07/23  21:21:46  PAGE 2   

   59          //{
   60          //      AUXR &= 0x7F;                   //定时器时钟12T模式
   61          //      TMOD &= 0xF0;                   //设置定时器模式
   62          //      TL0 = 0xF0;                             //设置定时初始值
   63          //      TH0 = 0xD8;                             //设置定时初始值
   64          //      TF0 = 0;                                //清除TF0标志
   65          //      TR0 = 1;                                //定时器0开始计时
   66          //      ET0 = 1;                                //使能定时器0中断z
   67          //}
   68          
   69          
   70          //float PID(float expect,float practical) //增量式PID
   71          //{
   72          //      float out;
   73          //      errir = expect - practical;
   74          //      total_errir += errir;
   75          //      ratio = kp * errir;     
   76          //      integral =  total_errir * ki;
   77          //      differential = (errir - last1_errir)*kd;
   78          //      last1_errir = errir;
   79          //      out = ratio + integral + differential;
   80          //      if(integral>1000) integral = 1000;
   81          //      if(integral<-1000) integral = -1000;
   82          //      return out;
   83          //}
   84          float PID(float Sample,float Position)//位置式PID
   85          {
   86   1              float Kp =0.04;
   87   1              float Ki =0;
   88   1              float Kd =0.009;
   89   1              float ErrPres,Pias,Out,ErrPres_formerly,ErrPres_lastseen;
   90   1              ErrPres=(Position-Sample);
   91   1              Pias+=ErrPres;//每次误差的总值
   92   1              Out=((ErrPres_formerly-ErrPres)*Kp)+(Pias*Ki)+((ErrPres-2*ErrPres_formerly+     ErrPres_lastseen)*Kd);
   93   1              //输出=（上次误差-这次误差）*p  +   误差的总值*i   +    （误差-2*上次误差+上上次误差）*d
   94   1              ErrPres_formerly=ErrPres;//上次误差
   95   1              ErrPres_lastseen=ErrPres_formerly;//上上次误差
   96   1              if(Out>1000)Out=1000;
   97   1              if(Out<0)Out=0;
   98   1              return Out;
   99   1      }
  100          
  101          
  102          
  103          void PWM_Config()
  104          {
  105   1              PWMA_PS|=0x01   ;
  106   1              PWMA_PS|=0x04   ;
  107   1              PWMA_ENO = 0x00;// 配置成 TRGI 的 pin 需关掉 ENO 对应 bit 并配成 input
  108   1              
  109   1              
  110   1              
  111   1              PWMA_CCER1 = 0x00;                                      // 清零CCER，关闭通道
  112   1              PWMA_CCER2 = 0x00;                                      //写 CCMRx 前必须先清零 CCxE 关闭通道
  113   1              
  114   1              PWMA_CCMR1 = 0x21;                                      // 通道模式配置为输入，接编码器 , 滤波器 4 时钟
  115   1              PWMA_CCMR2 = 0x21;                                      // 通道模式配置为输入，接编码器 , 滤波器 4 时钟
  116   1              
  117   1      //      PWMA_CCMR3 = 0x68;
  118   1      //    PWMA_CCMR4 = 0x68;
  119   1      //      
  120   1              PWMA_CCER1 = 0x55;                                      // 配置通道使能和极性
  121   1              PWMA_CCER2 = 0x55;                                      // 配置通道使能和极性
  122   1              
  123   1      //      PWMA_SMCR = 0x01;                                       // 编码器模式 1
  124   1      //      PWMA_SMCR = 0x02;                                       // 编码器模式 2 
C251 COMPILER V5.60.0,  main                                                               27/07/23  21:21:46  PAGE 3   

  125   1              PWMA_SMCR = 0x03;                                       // 编码器模式 3
  126   1              
  127   1      
  128   1              PWMA_ARRH = (unsigned char)(PWM_PERIOD >> 8); //设置周期时间
  129   1          PWMA_ARRL = (unsigned char)PWM_PERIOD;
  130   1              
  131   1      //      PWMA_ENO |= ENO3P; //使能输出
  132   1      //    PWMA_ENO |= ENO3N; //使能输出
  133   1      //        PWMA_PS = 0x00;  //高级 PWM 通道输出脚选择位  
  134   1              PWMA_IER = 0x82;                                                // 使能中断
  135   1              PWMA_CR1 |= 0x81;                                       // 使能PWM计数器
  136   1      }
  137          
  138          
  139          
  140          //========================================================================
  141          // 函数: UpdatePwm(void)
  142          // 描述: 更新PWM占空比. 
  143          // 参数: none.
  144          // 返回: none.
  145          // 版本: V1.0, 2012-11-22
  146          //========================================================================*/
  147          //void UpdatePwm(void)//PWMx_DUTY的值不要超过周期值
  148          //{
  149          ////    PWMA_CCR1H = (unsigned int)(PWM1_Duty >> 8); //设置占空比时间
  150          ////    PWMA_CCR1L = (unsigned int)(PWM1_Duty);
  151          ////    PWMA_CCR2H = (unsigned int)(PWM2_Duty >> 8); //设置占空比时间
  152          ////    PWMA_CCR2L = (unsigned int)(PWM2_Duty);
  153          //    PWMA_CCR3H = (unsigned int)(PWM3_Duty >> 8); //设置占空比时间
  154          //    PWMA_CCR3L = (unsigned int)(PWM3_Duty);
  155          ////    PWMA_CCR4H = (u8)(PWM4_Duty >> 8); //设置占空比时间
  156          ////    PWMA_CCR4L = (u8)(PWM4_Duty);
  157          //}
  158          
  159          void PWMA_ISR (void) interrupt 26
  160          {
  161   1              if(PWMA_SR1 & 0X02)
  162   1              {
  163   2              
  164   2                      cnt_H=PWMA_CCR1H;
  165   2                      cnt_L=PWMA_CCR1L;
  166   2                      PWMA_SR1 &=~0X02;
  167   2                      newcount = cnt_H * 256 + cnt_L; //获取新的计数器值
  168   2      
  169   2              }
  170   1      }
  171          
  172          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       453     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =        12          8
  xdata-const size     =    ------     ------
  edata size           =    ------     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
C251 COMPILER V5.60.0,  main                                                               27/07/23  21:21:46  PAGE 4   

  hconst size          =         4     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
