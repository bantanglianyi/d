C251 COMPILER V5.60.0,  MPU6050                                                            30/06/23  13:38:55  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE MPU6050
OBJECT MODULE PLACED IN .\Objects\MPU6050.obj
COMPILER INVOKED BY: C:\Keil_v5\C251\BIN\C251.EXE MPU6050.c LARGE INTR2 ROM(HUGE) BROWSE DEBUG PRINT(.\Listings\MPU6050.
                    -lst) OBJECT(.\Objects\MPU6050.obj) 

stmt  level    source

    1          #include "MPU6050.h"
    2          #include "Soft_I2C.h"
    3          void Delay1ms()         //@11.0592MHz
    4          {
    5   1              unsigned long i;
    6   1      
    7   1              _nop_();
    8   1              _nop_();
    9   1              i = 2763UL;
   10   1              while (i) i--;
   11   1      }
   12          
   13          
   14          void MPU_Delay_Ms(uint16_t Milliseconds)        //
   15          {
   16   1              while(Milliseconds--)
   17   1                      Delay1ms();
   18   1      }
   19          
   20          //IIC连续写
   21          //reg:要写入的寄存器地址
   22          //len:要写入的长度
   23          //buf:要写入的数据的首地址
   24          //返回值:0,正常
   25          //    其他,错误代码
   26          uint8_t MPU_Write_Len(uint8_t reg, uint8_t len, uint8_t *buf)
   27          {
   28   1              return i2c_mem_write(MPU_ADDR, reg, buf, len);
   29   1      }
   30          
   31          //IIC连续读
   32          //reg:要读取的寄存器地址
   33          //len:要读取的长度
   34          //buf:读取到的数据存储区
   35          //返回值:0,正常
   36          //    其他,错误代码
   37          uint8_t MPU_Read_Len(uint8_t reg, uint8_t len, uint8_t *buf)
   38          {
   39   1              return i2c_mem_read(MPU_ADDR, reg, buf, len);
   40   1      }
   41          
   42          //IIC写一个字节 
   43          //reg:寄存器地址
   44          //Data:数据
   45          //返回值:0,正常
   46          //    其他,错误代码
   47          uint8_t MPU_Write_Byte(uint8_t reg, uint8_t Data)
   48          {
   49   1              return i2c_mem_write(MPU_ADDR, reg, &Data, 1);
   50   1      }
   51          
   52          //IIC读一个字节 
   53          //reg:寄存器地址 
   54          //返回值:读到的数据
   55          uint8_t MPU_Read_Byte(uint8_t reg)
   56          {
   57   1              uint8_t res;
   58   1              i2c_mem_read(MPU_ADDR, reg, &res, 1);
C251 COMPILER V5.60.0,  MPU6050                                                            30/06/23  13:38:55  PAGE 2   

   59   1              return res;
   60   1      }
   61          
   62          //写入8位寄存器的一个位
   63          uint8_t MPU_Write_Bit(uint8_t addr, uint8_t bitNum, uint8_t Data)
   64          {
   65   1              return i2c_write_bit(MPU_ADDR, addr, bitNum, Data);
   66   1      }
   67          
   68          //写入8位寄存器的多个位
   69          uint8_t MPU_Write_Bits(uint8_t addr, uint8_t bitStart, uint8_t length, uint8_t Data)
   70          {
   71   1              return i2c_write_bits(MPU_ADDR, addr, bitStart, length, Data);
   72   1      }
   73          
   74          //读取一个位从8位器件的寄存器
   75          uint8_t MPU_Read_Bit(uint8_t addr, uint8_t bitNum, uint8_t *Data)
   76          {
   77   1              return i2c_read_bit(MPU_ADDR, addr, bitNum, Data);
   78   1      }
   79          
   80          //读取8位寄存器的多个位
   81          uint8_t MPU_Read_Bits(uint8_t addr, uint8_t bitStart, uint8_t length, uint8_t *Data)
   82          {
   83   1              return i2c_read_bits(MPU_ADDR, addr, bitStart, length, Data);
   84   1      }
   85          
   86          
   87          //初始化MPU6050
   88          //返回值:0,成功
   89          //    其他,错误代码
   90          uint8_t MPU_Init(void)
   91          {
   92   1              uint8_t res;
   93   1              MPU_Write_Byte(MPU_PWR_MGMT1_REG, 0X80);        //复位MPU6050
   94   1              MPU_Delay_Ms(100);
   95   1              MPU_Write_Byte(MPU_PWR_MGMT1_REG, 0X00);        //唤醒MPU6050 
   96   1              MPU_Set_Gyro_Fsr(3);                                            //陀螺仪传感器,±2000dps
   97   1              MPU_Set_Accel_Fsr(0);                                           //加速度传感器,±2g
   98   1              MPU_Set_Rate(50);                                                       //设置采样率50Hz
   99   1              MPU_Write_Byte(MPU_INT_EN_REG, 0X01);           //使能数据就绪中断
  100   1              MPU_Write_Byte(MPU_USER_CTRL_REG, 0X00);        //I2C主模式关闭
  101   1              MPU_Write_Byte(MPU_FIFO_EN_REG, 0X00);          //关闭FIFO
  102   1              MPU_Write_Byte(MPU_INTBP_CFG_REG, 0X80);        //INT引脚低电平有效
  103   1              res = MPU_Read_Byte(MPU_DEVICE_ID_REG);
  104   1              if (res == MPU_ADDR)//器件ID正确
  105   1              {
  106   2                      MPU_Write_Byte(MPU_PWR_MGMT1_REG, 0X01);        //设置CLKSEL,PLL X轴为参考
  107   2                      MPU_Write_Byte(MPU_PWR_MGMT2_REG, 0X00);        //加速度与陀螺仪都工作
  108   2                      MPU_Set_Rate(200);                                                      //设置采样率为200Hz
  109   2              }
  110   1              else
  111   1                      return 1;
  112   1              return 0;
  113   1      }
  114          
  115          //设置MPU6050陀螺仪传感器满量程范围
  116          //fsr:0,±250dps;1,±500dps;2,±1000dps;3,±2000dps
  117          //返回值:0,设置成功
  118          //    其他,设置失败 
  119          uint8_t MPU_Set_Gyro_Fsr(uint8_t fsr)
  120          {
  121   1              return MPU_Write_Byte(MPU_GYRO_CFG_REG, fsr << 3);//设置陀螺仪满量程范围  
  122   1      }
  123          
  124          //设置MPU6050加速度传感器满量程范围
C251 COMPILER V5.60.0,  MPU6050                                                            30/06/23  13:38:55  PAGE 3   

  125          //fsr:0,±2g;1,±4g;2,±8g;3,±16g
  126          //返回值:0,设置成功
  127          //    其他,设置失败 
  128          uint8_t MPU_Set_Accel_Fsr(uint8_t fsr)
  129          {
  130   1              return MPU_Write_Byte(MPU_ACCEL_CFG_REG, fsr << 3);//设置加速度传感器满量程范围  
  131   1      }
  132          
  133          //设置MPU6050的数字低通滤波器
  134          //lpf:数字低通滤波频率(Hz)
  135          //返回值:0,设置成功
  136          //    其他,设置失败 
  137          uint8_t MPU_Set_LPF(uint16_t lpf)
  138          {
  139   1              uint8_t Data = 0;
  140   1              if (lpf >= 188)Data = 1;
  141   1              else if (lpf >= 98)Data = 2;
  142   1              else if (lpf >= 42)Data = 3;
  143   1              else if (lpf >= 20)Data = 4;
  144   1              else if (lpf >= 10)Data = 5;
  145   1              else Data = 6;
  146   1              return MPU_Write_Byte(MPU_CFG_REG, Data);//设置数字低通滤波器  
  147   1      }
  148          
  149          //设置MPU6050的采样率(假定Fs=1KHz)
  150          //rate:4~1000(Hz)
  151          //返回值:0,设置成功
  152          //    其他,设置失败 
  153          uint8_t MPU_Set_Rate(uint16_t rate)
  154          {
  155   1              uint8_t Data;
  156   1              if (rate>1000)rate = 1000;
  157   1              if (rate<4)rate = 4;
  158   1              Data = 1000 / rate - 1;
  159   1              Data = MPU_Write_Byte(MPU_SAMPLE_RATE_REG, Data);       //设置数字低通滤波器
  160   1              return MPU_Set_LPF(rate / 2);   //自动设置LPF为采样率的一半
  161   1      }
  162          
  163          //得到温度值
  164          //返回值:温度值(扩大了100倍)
  165          short MPU_Get_Temperature(void)
  166          {
  167   1              uint8_t buf[2];
  168   1              short raw;
  169   1              float temp;
  170   1              MPU_Read_Len(MPU_TEMP_OUTH_REG, 2, buf);
  171   1              raw = ((uint16_t)buf[0] << 8) | buf[1];
  172   1              temp = 36.53 + ((double)raw) / 340;
  173   1              return temp * 100;;
  174   1      }
  175          
  176          //得到陀螺仪值(原始值)
  177          //gx,gy,gz:陀螺仪x,y,z轴的原始读数(带符号)
  178          //返回值:0,成功
  179          //    其他,错误代码
  180          uint8_t MPU_Get_Gyroscope(short *gx, short *gy, short *gz)
  181          {
  182   1              uint8_t buf[6], res;
  183   1              res = MPU_Read_Len(MPU_GYRO_XOUTH_REG, 6, buf);
  184   1              if (res == 0)
  185   1              {
  186   2                      *gx = ((uint16_t)buf[0] << 8) | buf[1];
  187   2                      *gy = ((uint16_t)buf[2] << 8) | buf[3];
  188   2                      *gz = ((uint16_t)buf[4] << 8) | buf[5];
  189   2              }
  190   1              return res;;
C251 COMPILER V5.60.0,  MPU6050                                                            30/06/23  13:38:55  PAGE 4   

  191   1      }
  192          
  193          //得到加速度值(原始值)
  194          //gx,gy,gz:陀螺仪x,y,z轴的原始读数(带符号)
  195          //返回值:0,成功
  196          //    其他,错误代码
  197          uint8_t MPU_Get_Accelerometer(short *ax, short *ay, short *az)
  198          {
  199   1              uint8_t buf[6], res;
  200   1              res = MPU_Read_Len(MPU_ACCEL_XOUTH_REG, 6, buf);
  201   1              if (res == 0)
  202   1              {
  203   2                      *ax = ((uint16_t)buf[0] << 8) | buf[1];
  204   2                      *ay = ((uint16_t)buf[2] << 8) | buf[3];
  205   2                      *az = ((uint16_t)buf[4] << 8) | buf[5];
  206   2              }
  207   1              return res;;
  208   1      }
  209          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =    ------     ------
  ecode size           =       746     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------         32
  xdata-const size     =    ------     ------
  edata size           =    ------     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =    ------     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
