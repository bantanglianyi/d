C251 COMPILER V5.60.0,  pwm                                                                15/07/23  18:39:19  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE pwm
OBJECT MODULE PLACED IN .\Objects\pwm.obj
COMPILER INVOKED BY: C:\Keil_v5\C251\BIN\C251.EXE pwm.c LARGE INTR2 BROWSE DEBUG PRINT(.\Listings\pwm.lst) OBJECT(.\Obje
                    -cts\pwm.obj) 

stmt  level    source

    1          /*---------------------------------------------------------------------*/
    2          /* --- STC MCU Limited ------------------------------------------------*/
    3          /* --- STC 1T Series MCU Demo Programme -------------------------------*/
    4          /* --- Mobile: (86)13922805190 ----------------------------------------*/
    5          /* --- Fax: 86-0513-55012956,55012947,55012969 ------------------------*/
    6          /* --- Tel: 86-0513-55012928,55012929,55012966 ------------------------*/
    7          /* --- Web: www.STCMCU.com --------------------------------------------*/
    8          /* --- Web: www.STCMCUDATA.com  ---------------------------------------*/
    9          /* --- QQ:  800003751 -------------------------------------------------*/
   10          /* 如果要在程序中使用此代码,请在程序中注明使用了STC的资料及程序            */
   11          /*---------------------------------------------------------------------*/
   12          
   13          /*************  功能说明    **************
   14          
   15          本例程基于STC32G为主控芯片的实验箱进行编写测试。
   16          
   17          使用Keil C251编译器，Memory Model推荐设置XSmall模式，默认定义变量在edata，单时钟存取访问速度快。
   18          
   19          edata建议保留1K给堆栈使用，空间不够时可将大数组、不常用变量加xdata关键字定义到xdata空间。
   20          
   21          高级PWM定时器 PWM1P/PWM1N,PWM2P/PWM2N,PWM3P/PWM3N,PWM4P/PWM4N 每个通道都可独立实现PWM输出，或者两两互补对
             -称输出.
   22          
   23          8个通道PWM设置对应P6的8个端口.
   24          
   25          通过P6口上连接的8个LED灯，利用PWM实现呼吸灯效果.
   26          
   27          PWM周期和占空比可以根据需要自行设置，最高可达65535.
   28          
   29          下载时, 选择时钟 24MHz (用户可自行修改频率).
   30          
   31          ******************************************/
   32          
   33          #include "pwm.h"
   34          
   35          #define PWMA_PSC                (12 - 1)        //240分频
   36          
   37          //#define PWMB_PSC              (12 - 1)        //240分频
   38          //****************************** 用户定义宏 ***********************************/
   39          
   40          
   41          #define PWM1_0      0x00        //P:P1.0  N:P1.1
   42          #define PWM1_1      0x01        //P:P2.0  N:P2.1
   43          #define PWM1_2      0x02        //P:P6.0  N:P6.1
   44          
   45          #define PWM2_0      0x00        //P:P1.2/P5.4  N:P1.3
   46          #define PWM2_1      0x04        //P:P2.2  N:P2.3
   47          #define PWM2_2      0x08        //P:P6.2  N:P6.3
   48          
   49          #define PWM3_0      0x00        //P:P1.4  N:P1.5
   50          #define PWM3_1      0x10        //P:P2.4  N:P2.5
   51          #define PWM3_2      0x20        //P:P6.4  N:P6.5
   52          
   53          #define PWM4_0      0x00        //P:P1.6  N:P1.7
   54          #define PWM4_1      0x40        //P:P2.6  N:P2.7
   55          #define PWM4_2      0x80        //P:P6.6  N:P6.7
   56          #define PWM4_3      0xC0        //P:P3.4  N:P3.3
   57          
C251 COMPILER V5.60.0,  pwm                                                                15/07/23  18:39:19  PAGE 2   

   58          #define ENO1P       0x01
   59          #define ENO1N       0x02
   60          #define ENO2P       0x04
   61          #define ENO2N       0x08
   62          #define ENO3P       0x10
   63          #define ENO3N       0x20
   64          #define ENO4P       0x40
   65          #define ENO4N       0x80
   66          
   67          /*****************************************************************************/
   68          
   69          
   70          
   71          
   72          
   73          /*************  本地变量声明    **************/
   74          
   75          
   76          void PWM_Init()
   77          {
   78   1              PWMA_PSCRH = (unsigned int)(PWMA_PSC >> 8);
   79   1              PWMA_PSCRL = (unsigned int)(PWMA_PSC);  
   80   1              
   81   1      //      PWMB_PSCRH = (unsigned int)(PWMB_PSC >> 8);
   82   1      //      PWMB_PSCRL = (unsigned int)(PWMB_PSC);                          //119+1=120预分频
   83   1      
   84   1      
   85   1          PWMA_CCER1 = 0x00; //写 CCMRx 前必须先清零 CCxE 关闭通道
   86   1          PWMA_CCER2 = 0x00;
   87   1          PWMA_CCMR1 = 0x68; //通道模式配置
   88   1          PWMA_CCMR2 = 0x68;
   89   1          PWMA_CCMR3 = 0x68;
   90   1          PWMA_CCMR4 = 0x68;
   91   1          PWMA_CCER1 = 0x55; //配置通道输出使能和极性
   92   1          PWMA_CCER2 = 0x55;
   93   1              
   94   1              PWMB_CCER1 = 0x00; // 写 CCMRx 前必须先清零 CCERx 关闭通道
   95   1              PWMB_CCER2 = 0x00; 
   96   1              PWMB_CCMR1 = 0x70; // 设置 CC5 为 PWM模式2
   97   1              PWMB_CCMR2 = 0x70; // 设置 CC6 为 PWM模式2
   98   1              PWMB_CCMR3 = 0x70; // 设置 CC7 为 PWM模式2
   99   1              PWMB_CCMR4 = 0x70; // 设置 CC8 为 PWM模式2
  100   1              PWMB_CCER1 = 0x11; // 使能 CC5 CC6通道
  101   1              PWMB_CCER2 = 0x11; // 使能 CC7 CC8通道
  102   1      
  103   1          PWMA_ARRH = (unsigned int)(PWMA_PERIOD >> 8); //设置周期时间
  104   1          PWMA_ARRL = (unsigned int)PWMA_PERIOD;
  105   1              PWMB_ARRH = (unsigned int)(PWMB_PERIOD >> 8); // 设置周期毫秒
  106   1              PWMB_ARRL = (unsigned int)(PWMB_PERIOD); 
  107   1      
  108   1      //    PWMA_ENO = 0x00;
  109   1          PWMA_ENO |= ENO1P; //使能输出
  110   1          PWMA_ENO |= ENO1N; //使能输出
  111   1      //    PWMA_ENO |= ENO2P; //使能输出
  112   1      //    PWMA_ENO |= ENO2N; //使能输出
  113   1      //    PWMA_ENO |= ENO3P; //使能输出
  114   1      //    PWMA_ENO |= ENO3N; //使能输出
  115   1      //    PWMA_ENO |= ENO4P; //使能输出
  116   1      //    PWMA_ENO |= ENO4N; //使能输出
  117   1              //PWMB_ENO = 0x55; // 使能 PWM5 6 7 8 端口输出
  118   1      
  119   1              //PWMA_PS = 0x00;  //高级 PWM 通道输出脚选择位
  120   1              PWMA_PS |= PWM1_1 ; //选择 PWM1_2 通道
  121   1              //PWMA_PS |= PWM2_1; //选择 PWM2_2 通道
  122   1      //    PWMA_PS |= PWM3_2; //选择 PWM3_2 通道
  123   1      //    PWMA_PS |= PWM4_2; //选择 PWM4_2 通道
C251 COMPILER V5.60.0,  pwm                                                                15/07/23  18:39:19  PAGE 3   

  124   1              //PWMB_PS = 0xAA;       
  125   1      
  126   1          PWMA_BKR = 0x80;  //使能主输出
  127   1              PWMB_BKR = 0x80;
  128   1          PWMA_CR1 |= 0x81; //使能ARR预装载,开始计时
  129   1              PWMB_CR1 |= 0x81;
  130   1      
  131   1      }
  132          
  133          //========================================================================
  134          // 函数: UpdatePwm(void)
  135          // 描述: 更新PWM占空比. 
  136          // 参数: none.
  137          // 返回: none.
  138          // 版本: V1.0, 2012-11-22
  139          //========================================================================*/
  140          void UpdatePwm(void)//PWMx_DUTY的值不要超过周期值
  141          {
  142   1          PWMA_CCR1H = (unsigned int)(PWM1_Duty >> 8); //设置占空比时间
  143   1          PWMA_CCR1L = (unsigned int)(PWM1_Duty);
  144   1      //    PWMA_CCR2H = (unsigned int)(PWM2_Duty >> 8); //设置占空比时间
  145   1      //    PWMA_CCR2L = (unsigned int)(PWM2_Duty);
  146   1      //    PWMA_CCR3H = (u8)(PWM3_Duty >> 8); //设置占空比时间
  147   1      //    PWMA_CCR3L = (u8)(PWM3_Duty);
  148   1      //    PWMA_CCR4H = (u8)(PWM4_Duty >> 8); //设置占空比时间
  149   1      //    PWMA_CCR4L = (u8)(PWM4_Duty);
  150   1      //        PWMB_CCR5H = (unsigned int)( PWM5_Duty >> 8); // 设置CC5占空比时间 占空比2.5%
  151   1      //        PWMB_CCR5L = (unsigned int)(PWM5_Duty ); 
  152   1      //        PWMB_CCR6H = (unsigned int)( PWM6_Duty >> 8); // 设置CC5占空比时间 占空比2.5%
  153   1      //        PWMB_CCR6L = (unsigned int)(PWM6_Duty ); 
  154   1      //        PWMB_CCR7H = (unsigned int)( PWM7_Duty >> 8); // 设置CC5占空比时间 占空比2.5%
  155   1      //        PWMB_CCR7L = (unsigned int)(PWM7_Duty ); 
  156   1      //        PWMB_CCR8H = (unsigned int)( PWM8_Duty >> 8); // 设置CC5占空比时间 占空比2.5%
  157   1      //        PWMB_CCR8L = (unsigned int)(PWM8_Duty ); 
  158   1              
  159   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       274     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =    ------     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =    ------     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
